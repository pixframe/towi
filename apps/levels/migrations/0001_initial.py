# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2018-09-08 21:41
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ArbolMusical',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('birds', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('nests', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('level', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('sublevel', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('tutorial', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('sound', models.CharField(blank=True, max_length=500, null=True)),
                ('birdsound', models.CharField(blank=True, max_length=500, null=True)),
                ('time', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('birdlistenedpre', models.CharField(blank=True, max_length=500, null=True)),
                ('birdlistened', models.CharField(blank=True, max_length=500, null=True)),
                ('errors', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('correct', models.PositiveSmallIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Arbol Musical',
            },
        ),
        migrations.CreateModel(
            name='ArenaMagica',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('levelkey', models.CharField(choices=[('ArbolMusical', 'ArbolMusical'), ('Rio', 'Rio'), ('ArenaMagica', 'ArenaMagica'), ('DondeQuedoLaBolita', 'DondeQuedoLaBolita'), ('Tesoro', 'Tesoro'), ('JuegoDeSombras', 'JuegoDeSombras'), ('PruebaEcologica', 'PruebaEcologica')], max_length=100)),
                ('level', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('sublevel', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('time', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('passed', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('repeated', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('accuracy', models.PositiveSmallIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Arena MÃ¡gica',
            },
        ),
        migrations.CreateModel(
            name='ChildrenTowiIsland',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kiwis', models.IntegerField(blank=True, null=True)),
                ('avatar', models.CharField(blank=True, max_length=100, null=True)),
                ('avatarclothes', models.CharField(blank=True, db_column='avatarClothes', max_length=1000, null=True)),
                ('owneditems', models.CharField(blank=True, db_column='ownedItems', max_length=1000, null=True)),
                ('activemissions', models.CharField(blank=True, db_column='activeMissions', max_length=1000, null=True)),
                ('missionlist', models.CharField(blank=True, db_column='missionList', max_length=1000, null=True)),
                ('activeday', models.IntegerField(db_column='activeDay')),
                ('riotutorial', models.IntegerField(db_column='rioTutorial')),
                ('tesorotutorial', models.IntegerField(db_column='tesoroTutorial')),
                ('arbolmusicaltutorial', models.IntegerField(db_column='arbolMusicalTutorial')),
                ('cid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='towiIslandChild', to='accounts.Children')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='towiIsland', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Towi Island',
            },
        ),
        migrations.CreateModel(
            name='DondeQuedoLaBolita',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('levelkey', models.CharField(choices=[('ArbolMusical', 'ArbolMusical'), ('Rio', 'Rio'), ('ArenaMagica', 'ArenaMagica'), ('DondeQuedoLaBolita', 'DondeQuedoLaBolita'), ('Tesoro', 'Tesoro'), ('JuegoDeSombras', 'JuegoDeSombras'), ('PruebaEcologica', 'PruebaEcologica')], max_length=100)),
                ('level', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('sublevel', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('time', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('numofmonkeys', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('numofobjects', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('instructions', models.CharField(blank=True, max_length=500, null=True)),
                ('numofmovements', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('timeofmovements', models.CharField(blank=True, max_length=100, null=True)),
                ('correct', models.PositiveSmallIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Donde quedo la bolita',
            },
        ),
        migrations.CreateModel(
            name='GameAreas',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_id', models.IntegerField(blank=True, null=True)),
                ('area', models.IntegerField(blank=True, null=True)),
                ('subarea', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Game areas',
            },
        ),
        migrations.CreateModel(
            name='GamesConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('configid', models.IntegerField(blank=True, null=True)),
                ('sid', models.IntegerField(blank=True, null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('cid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='games_configurations', to='accounts.Children')),
            ],
            options={
                'verbose_name': 'Game Configuration',
            },
        ),
        migrations.CreateModel(
            name='GamesConfigurationFiles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gamekey', models.CharField(choices=[('ArbolMusical', 'ArbolMusical'), ('Rio', 'Rio'), ('ArenaMagica', 'ArenaMagica'), ('DondeQuedoLaBolita', 'DondeQuedoLaBolita'), ('Tesoro', 'Tesoro'), ('JuegoDeSombras', 'JuegoDeSombras'), ('PruebaEcologica', 'PruebaEcologica')], max_length=100)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('file', models.CharField(blank=True, max_length=100, null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('cid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='games_configurations_files', to='accounts.Children')),
            ],
            options={
                'verbose_name': 'Game Configuration Files',
            },
        ),
        migrations.CreateModel(
            name='Header',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('gamekey', models.CharField(choices=[('ArbolMusical', 'ArbolMusical'), ('Rio', 'Rio'), ('ArenaMagica', 'ArenaMagica'), ('DondeQuedoLaBolita', 'DondeQuedoLaBolita'), ('Tesoro', 'Tesoro'), ('JuegoDeSombras', 'JuegoDeSombras'), ('PruebaEcologica', 'PruebaEcologica')], max_length=100)),
                ('gametime', models.IntegerField(blank=True, null=True)),
                ('passedlevels', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('repeatedlevels', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('playedlevels', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('device', models.CharField(blank=True, max_length=400, null=True)),
                ('cid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='headers', to='accounts.Children')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='headers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('id',),
                'verbose_name': 'Header',
            },
        ),
        migrations.CreateModel(
            name='PixframeCardsCodes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=100, null=True)),
                ('used', models.IntegerField(blank=True, null=True)),
                ('temp', models.IntegerField(blank=True, null=True)),
                ('temp_num', models.IntegerField(blank=True, null=True)),
                ('activation_day', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Pixframe cards code',
            },
        ),
        migrations.CreateModel(
            name='Prueba',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('playerage', models.IntegerField(db_column='playerAge')),
                ('playerbirthday', models.CharField(db_column='playerBirthday', max_length=300)),
                ('inputagetimeofcomp', models.IntegerField(db_column='inputAgeTimeOfComp')),
                ('playername', models.CharField(db_column='playerName', max_length=300)),
                ('playeraddress', models.CharField(db_column='playerAddress', max_length=300)),
                ('playercurrentdate', models.CharField(db_column='playerCurrentDate', max_length=300)),
                ('buytickettimeofcomp', models.IntegerField(db_column='buyTicketTimeOfComp')),
                ('packnormalscore', models.IntegerField(db_column='packNormalScore')),
                ('packreversescore', models.IntegerField(db_column='packReverseScore')),
                ('packtimeofcomp', models.IntegerField(db_column='packTimeOfComp')),
                ('weatherobjectpacked', models.CharField(db_column='weatherObjectPacked', max_length=1000)),
                ('weathercongruence', models.IntegerField(db_column='weatherCongruence')),
                ('lab1time', models.FloatField(db_column='lab1Time')),
                ('lab2time', models.FloatField(db_column='lab2Time')),
                ('lab3time', models.FloatField(db_column='lab3Time')),
                ('lab1latency', models.FloatField(db_column='lab1Latency')),
                ('lab2latency', models.FloatField(db_column='lab2Latency')),
                ('lab3latency', models.FloatField(db_column='lab3Latency')),
                ('lab1hits', models.IntegerField(db_column='lab1Hits')),
                ('lab2hits', models.IntegerField(db_column='lab2Hits')),
                ('lab3hits', models.IntegerField(db_column='lab3Hits')),
                ('lab1crosses', models.IntegerField(db_column='lab1Crosses')),
                ('lab2crosses', models.IntegerField(db_column='lab2Crosses')),
                ('lab3crosses', models.IntegerField(db_column='lab3Crosses')),
                ('lab1deadends', models.IntegerField(db_column='lab1DeadEnds')),
                ('lab2deadends', models.IntegerField(db_column='lab2DeadEnds')),
                ('lab3deadends', models.IntegerField(db_column='lab3DeadEnds')),
                ('labxhits', models.DecimalField(db_column='labXHits', decimal_places=2, max_digits=4)),
                ('labxcrosses', models.DecimalField(db_column='labXCrosses', decimal_places=2, max_digits=4)),
                ('labxdeadends', models.DecimalField(db_column='labXDeadEnds', decimal_places=2, max_digits=4)),
                ('labtimeofcomp', models.IntegerField(db_column='labTimeOfComp')),
                ('waitroomcorrect', models.IntegerField(db_column='waitRoomCorrect')),
                ('waitroomincorrect', models.IntegerField(db_column='waitRoomIncorrect')),
                ('flyplanecorrect', models.IntegerField(db_column='flyPlaneCorrect')),
                ('flyplaneincorrect', models.IntegerField(db_column='flyPlaneIncorrect')),
                ('flyplanemissed', models.IntegerField(db_column='flyPlaneMissed')),
                ('flyplanegreencorrect', models.IntegerField(db_column='flyPlaneGreenCorrect')),
                ('flyplanegreenincorrect', models.IntegerField(db_column='flyPlaneGreenIncorrect')),
                ('flyplanegreenmissed', models.IntegerField(db_column='flyPlaneGreenMissed')),
                ('flyplanetimeofcomp', models.IntegerField(db_column='flyPlaneTimeOfComp')),
                ('coinsmincorrect', models.IntegerField(db_column='coinsMinCorrect')),
                ('coinsminincorrect', models.IntegerField(db_column='coinsMinIncorrect')),
                ('coinsextracorrect', models.IntegerField(db_column='coinsExtraCorrect')),
                ('coinsextraincorrect', models.IntegerField(db_column='coinsExtraIncorrect')),
                ('coinsextramissed', models.IntegerField(db_column='coinsExtraMissed')),
                ('coinspatterntype', models.IntegerField(db_column='coinsPatternType')),
                ('coinsselected', models.CharField(db_column='coinsSelected', max_length=1000)),
                ('coinsclicksbeforemin', models.IntegerField(db_column='coinsClicksBeforeMin')),
                ('coinstimeofcomp', models.IntegerField(db_column='coinsTimeOfComp')),
                ('unpackfirstcorrect', models.IntegerField(db_column='unPackFirstCorrect')),
                ('unpacks1correct', models.IntegerField(db_column='unPackS1Correct')),
                ('unpacks2correct', models.IntegerField(db_column='unPackS2Correct')),
                ('unpacks3correct', models.IntegerField(db_column='unPackS3Correct')),
                ('unpacks1incorrect', models.IntegerField(db_column='unPackS1Incorrect')),
                ('unpacks2incorrect', models.IntegerField(db_column='unPackS2Incorrect')),
                ('unpacks3incorrect', models.IntegerField(db_column='unPackS3Incorrect')),
                ('unpacks1repeated', models.IntegerField(db_column='unPackS1Repeated')),
                ('unpacks2repeated', models.IntegerField(db_column='unPackS2Repeated')),
                ('unpacks3repeated', models.IntegerField(db_column='unPackS3Repeated')),
                ('unpackfourfirstsample', models.CharField(db_column='unPackFourFirstSample', max_length=1000)),
                ('unpackfourlastsample', models.CharField(db_column='unPackFourLastSample', max_length=1000)),
                ('unpackspacialprecisionsample', models.CharField(db_column='unPackSpacialPrecisionSample', max_length=1000)),
                ('unpacktimeofcomp', models.IntegerField(db_column='unPackTimeOfComp')),
                ('unpackperctotalcorrect', models.DecimalField(db_column='unPackPercTotalCorrect', decimal_places=2, max_digits=4)),
                ('header', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pruebaEcologica', to='levels.Header')),
            ],
            options={
                'verbose_name': 'Pruebas',
            },
        ),
        migrations.CreateModel(
            name='RecoleccionTesoro',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(blank=True, null=True)),
                ('sublevel', models.IntegerField(blank=True, null=True)),
                ('time', models.IntegerField(blank=True, null=True)),
                ('tutorial', models.IntegerField(blank=True, null=True)),
                ('passed', models.IntegerField(blank=True, null=True)),
                ('playerobjects', models.CharField(blank=True, db_column='playerObjects', max_length=500, null=True)),
                ('playerobjectsquantity', models.CharField(blank=True, db_column='playerObjectsQuantity', max_length=500, null=True)),
                ('correctobjects', models.CharField(blank=True, db_column='correctObjects', max_length=500, null=True)),
                ('correctobjectsquantity', models.CharField(blank=True, db_column='correctObjectsQuantity', max_length=500, null=True)),
                ('spawnedobjects', models.CharField(blank=True, db_column='spawnedObjects', max_length=500, null=True)),
                ('spawneddistractors', models.CharField(blank=True, db_column='spawnedDistractors', max_length=500, null=True)),
                ('notsurecorrect', models.IntegerField(blank=True, db_column='notSureCorrect', null=True)),
                ('notsureincorrect', models.IntegerField(blank=True, db_column='notSureIncorrect', null=True)),
                ('minobjects', models.IntegerField(blank=True, db_column='minObjects', null=True)),
                ('maxobjects', models.IntegerField(blank=True, db_column='maxObjects', null=True)),
                ('availableobjects', models.CharField(blank=True, db_column='availableObjects', max_length=500, null=True)),
                ('availablecategories', models.CharField(blank=True, db_column='availableCategories', max_length=500, null=True)),
                ('searchorders', models.CharField(blank=True, db_column='searchOrders', max_length=500, null=True)),
                ('availabledistractors', models.CharField(blank=True, db_column='availableDistractors', max_length=500, null=True)),
                ('header', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tesoro', to='levels.Header')),
            ],
            options={
                'verbose_name': 'Tesoro',
            },
        ),
        migrations.CreateModel(
            name='Rio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(blank=True, null=True)),
                ('sublevel', models.IntegerField(blank=True, null=True)),
                ('time', models.IntegerField(blank=True, null=True)),
                ('tutorial', models.IntegerField(blank=True, null=True)),
                ('reverse', models.IntegerField(blank=True, null=True)),
                ('speed', models.IntegerField(blank=True, null=True)),
                ('correctobjects', models.IntegerField(blank=True, db_column='correctObjects', null=True)),
                ('incorrectobjects', models.IntegerField(blank=True, db_column='incorrectObjects', null=True)),
                ('levelobjects', models.CharField(blank=True, db_column='levelObjects', max_length=500, null=True)),
                ('availableobjects', models.CharField(blank=True, db_column='availableObjects', max_length=500, null=True)),
                ('reverseobjects', models.CharField(blank=True, db_column='reverseObjects', max_length=500, null=True)),
                ('neutralobjects', models.CharField(blank=True, db_column='neutralObjects', max_length=500, null=True)),
                ('forceforestobjects', models.CharField(blank=True, db_column='forceForestObjects', max_length=500, null=True)),
                ('forcebeachforest', models.CharField(blank=True, db_column='forceBeachForest', max_length=500, null=True)),
                ('specialreverseobjects', models.CharField(blank=True, db_column='specialReverseObjects', max_length=500, null=True)),
                ('specialleaveobjects', models.CharField(blank=True, db_column='specialLeaveObjects', max_length=500, null=True)),
                ('header', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rio', to='levels.Header')),
            ],
            options={
                'verbose_name': 'Rio',
            },
        ),
        migrations.CreateModel(
            name='Sombras',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('levelkey', models.CharField(blank=True, db_column='levelKey', max_length=100, null=True)),
                ('level', models.IntegerField(blank=True, null=True)),
                ('sublevel', models.IntegerField(blank=True, null=True)),
                ('shadow', models.CharField(blank=True, max_length=100, null=True)),
                ('shadowtime', models.CharField(blank=True, db_column='shadowTime', max_length=100, null=True)),
                ('numofoptions', models.IntegerField(db_column='numOfOptions')),
                ('options', models.CharField(blank=True, max_length=500, null=True)),
                ('correct', models.IntegerField(blank=True, null=True)),
                ('time', models.IntegerField(blank=True, null=True)),
                ('header', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sombras', to='levels.Header')),
            ],
            options={
                'verbose_name': 'sombras',
            },
        ),
        migrations.CreateModel(
            name='TowiIndex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gamekey', models.CharField(choices=[('ArbolMusical', 'ArbolMusical'), ('Rio', 'Rio'), ('ArenaMagica', 'ArenaMagica'), ('DondeQuedoLaBolita', 'DondeQuedoLaBolita'), ('Tesoro', 'Tesoro'), ('JuegoDeSombras', 'JuegoDeSombras'), ('PruebaEcologica', 'PruebaEcologica')], max_length=100)),
                ('index', models.FloatField(blank=True, null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('serverdate', models.DateTimeField(db_column='serverDate')),
                ('cid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='towiIndexChild', to='accounts.Children')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='towiIndex', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Towi index',
            },
        ),
        migrations.AddField(
            model_name='dondequedolabolita',
            name='header',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bolita', to='levels.Header'),
        ),
        migrations.AddField(
            model_name='arenamagica',
            name='header',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='arenaMagica', to='levels.Header'),
        ),
        migrations.AddField(
            model_name='arbolmusical',
            name='header',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='arbolMusical', to='levels.Header'),
        ),
    ]
